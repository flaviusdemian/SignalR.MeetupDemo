@{
    ViewBag.Title = "Chat";
}
<h2>Chat</h2>
<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <ul id="discussion"></ul>
</div>

<div id="progress">
    <input type="button" id="startProgress" value="Update me" />
    <input type="number" id="progressValue" value="0" />
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // enable logging
            $.connection.hub.logging = true;

            // set a query string parameter
            $.connection.hub.qs = { "version": "2.1" };

            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.Chat;

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };

            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));

            // Set initial focus to message input box.
            $('#message').focus();


            $.connection.hub.error(function (error) {
                console.log('SignalR error: ' + error);
            });

            // Start the connection.
            //$.connection.start({ transport: 'longPolling' });
            //$.connection.start({ transport: ['webSockets', 'foreverFrame', 'serverSentEvents', 'longPolling'] });
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    chat.state.userName = "Mili";
                    chat.state.computerName = "MILI-SSD-PC";

                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val()).fail(function (e) {
                        if (e.source === 'HubException') {
                            console.log(e.message + ' : ' + e.data.user);
                        }
                    });;
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });

                $("#startProgress").click(function () {
                    chat.server.doLongRunningThing(100);
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}